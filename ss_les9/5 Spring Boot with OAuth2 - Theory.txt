Spring Boot with OAuth2 - Theory

            https://mehmetozanguven.github.io/spring/2021/09/15/spring-with-oauth2-theory.html
            
            
    1. What is the OAuth2
    2. Why do we need OAuth2
    3. The components of OAuth2
    4. Implementations with OAuth2
        4.1 Grant Type - Authorization Code
            4.1.1 Make the Authentication Request - Step 1
            4.1.2 Obtain an access token - Step 2
            4.1.3 Call the protected resource - Step 3
        4.2 Grant Type - Password
            4.2.1 Request an acces token
            4.2.2 Use access token to call resources
        4.3 Grant Type - Client Credentials
            4.3.1 Request an access token
            4.3.2 Use the access token to call resources
    5. Refresh token with OAuth2
    6. Security in OAuth2
    7. Conclusion      
    
    
    
    
Що таке OAuth2
    OAuth 2.0 — це галузевий стандартний протокол авторизації.
    
    OAuth 2.0 зосереджується на простоті розробника клієнта, надаючи при цьому певні потоки авторизації для веб-програм, 
    настільних програм, мобільних телефонів і пристроїв у вітальні.
    
    Загальна основна мета OAuth2 — надати сторонньому веб-сайту або додатку доступ до ресурсу
    
    Швидкі примітки:
        Авторизація — це процес надання користувачеві дозволу на доступ до певного ресурсу чи функції.
        Автентифікація — це процес підтвердження користувачів, якими вони себе видають.
        
    Навіщо нам OAuth2
    Повинна бути причина використовувати один інструмент замість іншого. OAuth2 може бути корисним, оскільки:
    
     > Ми не хочемо зберігати облікові дані користувача (я маю на увазі пароль користувача) у нашій системі.
     > Якщо у нас багато невеликих програм (скажімо, N програм) і якщо до кожної програми можна отримати доступ із 
        автентифікованими користувачами, тоді ми матимемо N окремих таблиць для зберігання кожного користувача/клієнта, 
        який увійшов у систему
        
        
    Якщо ви подивіться на малюнок нижче (img), те саме ім’я користувача та пароль клієнта зберігаються в трьох різних 
    програмах незалежно. Якщо ви працюєте в організації, це буде важко підтримувати.
    
                    https://mehmetozanguven.github.io/assets/spring/oauth2/independent_credentials.png
                    
                    
                    
                          +-----------------+             +----+
                |-------> | Spring Boot App | ----------> | DB |  user1:password1
                |         +-----------------+             +----+
                |
     +--------+ |         +-----------------+             +----+
     | Client | |-------> | Spring Boot App | ----------> | DB |  user2:password2
     +--------+ |         +-----------------+             +----+
                |
                |         +-----------------+             +----+
                |-------> | Spring Boot App | ----------> | DB |  user3:password3
                          +-----------------+             +----+
                       
    
    Тому було б краще, якби ми виділили відповідальність за керування обліковими даними в одному компоненті. 
    Ми можемо назвати цей компонент сервером авторизації :
    
            Таким чином ми усуваємо дублювання облікових даних користувача. (img_1)



                    
                          +-----------------+             
                |-------> | Spring Boot App | ----------> | 
                |         +-----------------+             |
                |                                         |
     +--------+ |         +-----------------+             +----------------------------+           +----+
     | Client | |-------> | Spring Boot App | ----------> |   Authorization Server     | ------->  | DB |  user:password
     +--------+ |         +-----------------+             |  (Another Spring Boot App) |           +----+
                |                                         +----------------------------+
                |         +-----------------+             |
                |-------> | Spring Boot App | ----------> | 
                          +-----------------+                      Each application will get the same user and password
                       


Компоненти OAuth2

    Важливо знати компоненти OAuth2, перш ніж приступати до впровадження.
    
    > resource server = Сервер ресурсів : програма, яка розміщує ресурси, що належать користувачам. Ресурсами можуть бути дані користувачів.
    > user (resource owner) = Користувач (власник ресурсу) : особа, яка володіє ресурсами. Користувач представляє ім'я користувача та пароль, 
        щоб ідентифікувати себе.
    > client = Клієнт : програма , яка отримує доступ до ресурсів, якими володіє користувач, від імені користувача.
        > Клієнт використовує ClientID і секретний ключ, щоб ідентифікувати себе. Але це не те саме, що облікові дані користувача.
    > authorization server = Сервер авторизації : програма, яка авторизує клієнта для доступу до ресурсів користувача. Коли сервер авторизації 
        вирішує, що клієнту дозволено доступ, він створює (або видає) маркер.
        > Потім клієнт використовує цей маркер, щоб підтвердити серверу ресурсів, що він був авторизований сервером авторизації.
        > Сервер ресурсів дозволяє клієнту отримати доступ до ресурсу, якщо він має дійсний маркер.
        
        
    Всі ці процеси можна легко зрозуміти на картинці: (img_2)
 
 

Реалізації з OAuth2
    OAuth2 надає кілька можливих потоків автентифікації, і ми можемо вибрати той, який підходить для нашого випадку. 
    Загалом OAuth2 надасть нам маркер для авторизації. Отримавши маркер, ми можемо отримати доступ до певних ресурсів. 
    Кілька можливих автентифікацій надає кілька способів отримати маркер, який називається грантами = grants.
    
    Ось найпоширеніші дозволи, які надає OAuth2:
        > Authorization code = Код авторизації
        > Password = Пароль
        > Client credentials = Облікові дані клієнта      
        
        
        
Grant Type - Authorization Code
    
    Весь процес можна описати на графіку: (img_3)
    
    
    User                         Client                          Authorization Server              Resource Server
    |                             |                                        |                           |
    |    You want to access       |                                        |                           |
    |      your account           |                                        |                           |
    | ------------------------->  |                                        |                           |
    |                             |                                        |                           |
    |   Via AuthServer, please    |                                        |                           |
    |    allow me to access       |                                        |                           |
    |     your data               |                                        |                           |
    | <-----------------------    |                                        |                           |
    |                             |                                        |                           |
    |                             |                                        |                           |
    |    You will say, "Hello Authorization Server, I allow the client     |                           |
    |     to access my accounts. Here are my credentials"                  |                           |
    |  ------------------------------------------------------------------> |                           |
    |                             |                                        |                           |
    |                             |     Hello Client, I allowed you        |                           |
    |                             |       to access its accounts.          |                           |
    |                             | <------------------------------------  |                           |
    |                             |                                        |                           |
    |                             |    Ok, give me a token                 |                           |
    |                             |  ------------------------------------> |                           |
    |                             |                                        |                           |
    |                             |    Here is the token                   |                           |
    |                             | <------------------------------------- |                           | 
    |                             |                                        |                           |
    |                             |      Hello, Resource Server, I want to access user's account.      |
    |                             |        Here is the token from AuthServer                           |
    |                             | -----------------------------------------------------------------> |                                                                    
    |                             |                                        |                           |
    |                             |                                   Token was correct.               |
    |                             |                                    here is the data                |
    |                             | <----------------------------------------------------------------- |   
    |                             |                                        |                           |  
    
    
    
    
        Докладніше, коли клієнт каже «Через AuthServer, будь ласка, дозвольте мені…», відбувається те, що клієнт 
        перенаправляє користувача (вас) на сторінку входу на сервер авторизації.
        
        Якщо надані вами облікові дані правильні, сервер авторизації викличе URL-адресу клієнта під назвою 
        redirect URI = URI перенаправлення
     
    
    Загалом є 3 кроки:
        1. Make the authentication request = Зробіть запит на автентифікацію
        2. Obtain an access token = Отримайте маркер доступу
        3. Call the protected resource = Зробіть запит на захищений ресурс  
        
        
        
    Make the Authentication Request - Step 1
    
        Клієнт перенаправляє користувача до кінцевої точки сервера авторизації. Наприклад, це відбувається, коли ви 
        натискаєте «Увійти за допомогою Google» на будь-якому веб-сайті
        
        Майте на увазі, що користувачі взаємодіятимуть безпосередньо з сервером авторизації. Користувачі не 
        надсилатимуть облікові дані клієнту (веб або мобільний додаток)
        
        
        Клієнт викликає кінцеву точку авторизації з такими деталями в запиті:
            * response_type=code: вказує, що клієнт очікує код. Код буде використано для отримання токена доступу.
            * client_id=ID: цей ідентифікатор ідентифікує клієнтську програму.
            * redirect_uri: повідомляє серверу авторизації, куди перенаправити користувача після успішної автентифікації.
            * scope: пов'язані з наданими повноваженнями
            * state: визначає маркер підробки міжсайтового запиту (CSRF), який використовується для захисту CSRF.
        
        Після успішної автентифікації:
            * AuthServer викликає зворотний виклик клієнта, визначеного URI перенаправлення, і надає code і 
                значення state .
            * Клієнт перевіряє, чи значення стану збігається з надісланим. (Щоб підтвердити, що ніхто інший 
                не намагається викликати URI перенаправлення
    
    
    Obtain an access token - Step 2
    
        Крок 1 є підтвердженням автентифікації користувача.
        
        Після кроку 1 клієнт викличе AuthSever із кодом (перший маркер), щоб отримати маркер (другий маркер).
        
        Давайте розберемося:
            * Перший код є доказом того, що користувач безпосередньо взаємодіяв із AuthServer. Клієнт отримує цей код і 
                використовує його знову для автентифікації та отримання маркера доступу (другий маркер)
            * Клієнт використовує другий маркер для доступу до ресурсів на сервері ресурсів.
        
        Ви можете запитати: «Чому AuthServer не повернув маркер (токен доступу) з кроку 1?» Якби AuthServer повернув 
        маркер вперше, клієнту не потрібно було б викликати другий раз»:
        
        Насправді існує потік під назвою неявний тип надання, де AuthServer повертає маркер доступу під час першого виклику. 
        Але сьогодні майже всі відомі authServers не дозволяють нам використовувати неявний тип надання, 
        оскільки він має проблеми безпеки:
        
            * AuthServer, використовуючи код (перший маркер), перевіряє, чи це справді правильний клієнт.
            * Надсилаючи код, клієнт підтверджує, хто це, використовуючи свої облікові дані.
        
        Щоб отримати маркер доступу (access token), клієнт здійснює виклик і надсилає:
            * Код авторизації, який свідчить про авторизацію користувача
            * Їхні облікові дані, у яких зазначено, що той самий клієнт надсилає запит.
        
        
        Загалом, на кроці 2 клієнт робить запит до AuthServer. І запит містить:
            > code: це код авторизації з кроку 1. (Це підтвердження того, що користувач автентифікований)
            > ** client_idі client_secret**, це облікові дані клієнта
            > redirect_url: те саме, що і крок 1
            > grant_type: це значення authorization_code. Визначає потік, яким ми хочемо слідувати.              
            
            
        У відповідь сервер надсилає access_token. Клієнт використовуватиме цей маркер (token) для виклику сервера ресурсів.
        
        
    
    Call the protected resource - Step 3
        
        Прямо зараз клієнт може звернутись до захищеного ресурсу. Клієнт використовує маркер доступу в заголовку 
        запиту авторизації під час виклику кінцевої точки сервера ресурсів.
    
    
  --------------------------------------------------------------------------------------------------------------------
    
Grant Type - Password

    Now let’s discuss password grant type.
        |  Цей grant_type менш безпечний, ніж тип надання коду авторизації. Оскільки користувач поділиться 
        |  своїми обліковими даними з клієнтом
        
        img_4
        
     User                         Client                          Authorization Server              Resource Server
     |                             |                                        |                           |
     |    I want to access         |                                        |                           |
     |      my account.            |                                        |                           |
     |    Here are my credentials  |                                        |                           |
     | ------------------------->  |                                        |                           |
     |                             | User want to access his/her account.   |                           |
     |                             | Here is his/her credentials            |                           |
     |                             | ------------------------------------>  |                           |
     |                             |                                        |                           |
     |                             |   The credentials was correct.         |                           |
     |                             |   Here is the access token.            |                           |
     |                             | <------------------------------------- |                           |
     |                             |                                        |                           |
     |                             |                        I need user's account.                      |
     |                             |                   Here is the token from AuthServer                |
     |                             | -----------------------------------------------------------------> |                                                                    
     |                             |                                        |                           |
     |                             |                        Here are the User's accounts                |
     |                             | <----------------------------------------------------------------- |   
     |                             |                                        |                           |        
      
      
      
    У цьому потоці клієнт збирає облікові дані користувача та використовує їх для автентифікації та отримання маркера 
    доступу від AuthServer 
    
    
    Цей потік зазвичай використовується, коли authServer підтримується тією ж організацією. У тій самій організації, 
    якщо ми використовуємо тип надання коду авторизації, тоді для кожного запиту, який ввійшов у систему, користувачі 
    будуть переспрямовані на сторінку входу в організацію та назад. Тип надання пароля може бути хорошим вибором 
    для цих сценаріїв.
    
    
    Є два завдання для виконання:
        > Запит на маркер доступу
        > Використовуйте маркер доступу для виклику ресурсів
     
     
    Запит на маркер доступу
    
        Це просто. Клієнт збирає облікові дані користувача та викликає сервер авторизації, щоб отримати маркер доступу. 
        Клієнт також надсилає наступне:
            > grant_type: це значення типу надання пароля
            > client_idіclient_secret : це облікові дані клієнта
            > scope: пов'язані з наданими повноваженнями
            > usernameіpassword : це облікові дані користувача. (надіслано як звичайний текст)
    
    У відповідь клієнт отримує маркер доступу.
    
    Використовуйте маркер доступу для виклику ресурсів
    
    Отримавши маркер доступу, клієнт може використовувати цей маркер для виклику кінцевих точок на сервері ресурсів.
    
    
------------------------------------------------------------------------------------------------------------------------  

 Grant Type - Client Credentials
 
    Let’s discuss client credentials grant type (img_5)
    
    
       Client                          Authorization Server              Resource Server
         |                                     |                              | 
         | I need to access resource X.        |                              | 
         | I am not doing any action on        |                              | 
         | behalf of a user.                   |                              |
         | Here are my client credentials.     |                              |
         |  -------------------------------->  |                              |
         |                                     |                              |
         |  The credentials was correct.       |                              |
         |  Here is the access token.          |                              |
         | <---------------------------------- |                              |
         |                                     |                              |
         |                     I need to access resource X.                   |
         |                     Here is the token from AuthServer              |
         | -----------------------------------------------------------------> |                                                                    
         |                                     |                              |
         |                                     |                              |
         |                              Here is the resource X.               |
         | <----------------------------------------------------------------- |   
         |                                     |                              |   
         
    
    Як бачите, у потоці немає такого актора, як користувач.
    
    Цей потік може бути корисним, коли потрібен лише міжмашинний зв’язок. Є два кроки:
        * Запит на маркер доступу
        * Використовуйте маркер доступу для виклику ресурсів     
         
    Запит на маркер доступу
    
    Клієнт надішле запит із такими:
        * grant_type: це значення типу надання облікових даних клієнта
        * client_idіclient_secret : це облікові дані клієнта
        * scope: пов'язані з наданими повноваженнями
        
    У відповідь клієнт отримує маркер доступу.
    
    Використовуйте маркер доступу для виклику ресурсів
    
    Клієнт використовуватиме маркер для виклику кінцевих точок на сервері ресурсів.
    
    
     
-----------------------------------------------------------------------------------------------------------------------

Refresh token with OAuth2
             
         
       Як останній крок, давайте обговоримо сам маркер (token).
       
       Майте на увазі, що OAuth2 не змушує нас застосовувати певний маркер. 
       Навіть токен може мати нескінченний термін дії. Але як правило, маркери, 
       згенеровані з AuthServer, живуть коротко (наскільки це можливо). (img_6)
         
     
       Client                          Authorization Server              Resource Server
         |                                     |                              | 
         |                                     |                              | 
         |              I need to access user's account.                      | 
         |              Here is the access token.                             |
         |  ----------------------------------------------------------------> |
         |                                     |                              |
         |                                     |                              |
         |                                  403 Forbidden. (Token expired)    |
         | <------------------------------------------------------------------|
         |                                     |                              |
         |                                     |                              |
         |   Here is the refresh token         |                              |
         |   to get new access token.          |                              |
         | ----------------------------------> |                              |
         |                                     |                              |
         |    Here is the new access token     |                              |
         |    and new refresh token            |                              |
         | <---------------------------------- |                              |
         |                                     |                              |
         |              I need to access user's account.                      | 
         |              Here is the access token.                             |
         |  ----------------------------------------------------------------> |
         |                                     |                              |           
         |                                     |                              |           
         |                                      Token was correct.            |           
         |                                   Here is the user's account.      |           
         | <----------------------------------------------------------------- |           
         |                                     |                              |           
         
        
       Коли клієнт має маркер оновлення, клієнт надсилає запит із таким:
           * grant_type: це значення маркера оновлення
           * client_idіclient_secret : це облікові дані клієнта
           * refresh_token: це маркер оновлення
           * scope: пов'язані з наданими повноваженнями
           
       У відповідь сервер авторизації повертає новий маркер доступу та новий маркер оновлення.  
         
         
         
========================================================================================================================

Безпека в OAuth2
    
       Звичайно, OAuth2 не є куленепробивним рішенням. Під час використання OAuth2 може виникнути проблема безпеки:      
            * CSRF-атаки: якщо після входу в систему немає захисту від CSRF-атак, ми будемо вразливі до виконання дій, 
                які не були розпочаті законними користувачами.
            * Викрадені облікові дані клієнта: якщо хтось вкраде облікові дані клієнта (припустімо, що ваші облікові 
                дані Google, ви розробляєте spring boot application з входом через Google, були викрадені 
                кимось іншим), ми фактично в мертвій ситуації :)
            * Повторне відтворення маркера: якщо хтось перехопить запит, він також може перехопити маркери
         
         
         
-----------------------------------------------------------------------------------------------------------------------

Висновок
    
    У цій статті ми розглянули, що таке OAuth2 і теорію самого OAuth2.
    
    Ми розглянули різні реалізації OAuth2:
        > Authorization Grant Type = Тип надання авторизації: найпоширеніший. Ви використовуватимете його під час 
            впровадження системи єдиного входу з Gmal/Github/Facebook тощо.
        > Password grant type = Тип надання пароля: використовується, коли authServer підтримується тією ж організацією. 
            Крім того, він менш безпечний, ніж тип надання авторизації
        > Client credentials grant type = Тип надання облікових даних клієнта: корисно, коли потрібен лише міжмашинний зв’язок.
    
    
    Ми також розглянули токен оновлення та його призначення. В основному маркер оновлення використовується, коли термін 
    дії маркера доступу закінчився, і це корисно, оскільки ми не хочемо переспрямовувати користувачів на сторінку входу 
    щоразу, коли термін дії маркера закінчився.
    
    Ми також знаємо, що OAuth2 не змушує нас застосовувати певний маркер. Навіть токен може мати нескінченний термін дії.
             
    
    Як і будь-яке інше програмне забезпечення, OAuth2 також має певні проблеми з безпекою, якщо його не 
    реалізовано належним чином. Деякі питання безпеки:
        > CSRF: хтось може виконувати дію від імені законного користувача(ів)
        > Викрадені облікові дані клієнта: що б ви не робили, захистіть облікові дані свого клієнта, інакше ви мертві.
         
         
         
         
         
         